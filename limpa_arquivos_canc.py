# -*- coding: utf-8 -*-
"""Limpa_Arquivos_Canc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uLZqwi0bkdAg_HgRv14PWdJemaHK2ltd
"""

##Instruções: Copiar este código e colar em um Google Colab no navegador

import pandas as pd
from google.colab import files

arknames = ['F01.csv', 'F02.csv', 'F03.csv', 'F04.csv', 'F08.csv', 'F09.csv', 'F10.csv', 'F12.csv', 'F13.csv', 'F14.csv', 'F15.csv', 'F16.csv', 'F17.csv', 'F19.csv', 'F28.csv', 'F50.csv', 'F52.csv', 'F53.csv']

#O arquivo CSV é uma Serie onde todas as informações ficam no index
#Esta função lê todos os index da Serie e os coloca em uma única lista. Cada index se transforma em uma lista, fazendo assim uma lista de 2 dimensões
def make_list(tabel):
    
    lista = []
    for i in tabel.index:
        lista.append(i)
    return lista

# Esta função lê a lista criada na função "make_list(tabel)" e separa as informações conforme necessario
def separete(lista):

    rows = []
    for ind in range(0,len(lista)-1):

        verif = lista[ind][0]

        if pd.isnull(lista[ind][0]):
            verif = 'null'

        if verif[:3] == 'Pdv':
            ref1 = adict(ind, lista)
            if ref1 == 1:
                return rows
            ref2 = add(ref1)
            rows.append(ref2)
    return rows

def adict(idx, lista):

    aux = []
    if idx+2 >= len(lista)-1:
        return 1

    verif = lista[idx+2][0]
    if pd.isnull(lista[idx+2][0]):
        verif = 'null'

    if verif[:3] == 'Pdv':
        for j in range(idx, idx+3):
            if j == idx+2:
                aux.append(['', '', '', ''])
            else:
                aux.append(lista[j])
    else:
        for j in range(idx, idx+3):
                aux.append(lista[j])
    return aux

def add(lst):

    aux2 = []
    for info in lst:
        for x in info:
            aux2.append(x)
    return aux2

#Substitui os dados de residuos que não são necessarios para a tabela
def substituir(dados):
    proc = ['Pdv:', 'Cupo', 'Valo', 'Oper', 'Data', 'Hora', 'Resp']
    subs = ['Pdv: ', 'Cupom: ', 'Valor: ', 'Operador: ', 'Data: ', 'Hora: ', 'nan', 'Responsável: ']

    for i in range(len(dados)):
        for j in range(len(dados[i])):
            data = dados[i][j]
            
            if pd.isnull(data):
                continue

            if data[:4] in proc:
                newdata = data.replace(subs[j], '')
                dados[i][j] = newdata

    return dados

#Cria o dataFrame com as listas construidas
def mk_tabel(rows, n, raw):

    col = ['PDV', 'CUPOM', 'VALOR', 'OPERADOR', 'DATA', 'HORA', 'NAN', 'RESPONSAVEL', 'NAN', 'COD_PROD', 'DESC_PROD', 'QTDE X VALOR']
    tabela = pd.DataFrame(columns=col)
    if rows == 1:
        return
    for row in rows:
        tabela.loc[len(tabela)] = row
    name = raw[n]
    lj = name[:3]
    tabela['LOJA'] = pd.Series(lj, index=tabela.index)
    tabela.dropna(subset=['CUPOM'], inplace=True)
    tabela.drop(columns=['NAN'], inplace=True)
    return tabela

#Carrega os dataframes prontos e salva-os em formato XLSX
def salva_ark(dados, n, raw):

    name = raw[n]
    lj = name[:3]
    caminho = '/content/Arquivos_xlsx/' + lj + '.xlsx'
    print(f"Salvando: {caminho}")
    dados.to_excel(caminho)
    print(f"{caminho} salvo com sucesso!\n")

#Função inicial / Lê os arquivos CSV e executa as funções de limpeza, além de salva-las.
def initialize(raw):

    for i in range(len(raw)):
        string = '/content/' + raw[i]
        print(f'Limpando: {raw[i]}')
        try:
            tabel = pd.read_csv(string, sep=';', encoding='latin-1')
        except:
            print(f"Arquivo {string} não encontrado\n")
            continue
        else:
            #funções de limpeza
            lista = make_list(tabel)
            data = separete(lista)
            dataClean = substituir(data)
            data_csv = mk_tabel(dataClean, i, raw)            
            salva_ark(data_csv, i, raw)

#Compila os arquivos xlsx salvos e coloca todas as informações em um único dataframe.
def make_tabel_geral(arks):

    tabela_geral = pd.DataFrame()
    print('Compilando tabela geral...')

    for raw in arks:
        lj = raw[:3]
        caminho = 'Arquivos_xlsx/' + lj + '.xlsx'
        try:
            tabela = pd.read_excel(caminho, index_col=0)
        except:
            print(f'Arquivo {caminho} não encontrado\n')
            continue
        else:
            tabela_geral = tabela_geral.append(tabela)

    prepara_dowload(tabela_geral)

#Converte os dados em um dataFrame e salva em excel para poder baixar.
def prepara_dowload(tabel):
    tabela = pd.DataFrame(tabel)
    salvar = '/content/Arquivos_xlsx/tabela_geral.xlsx'
    tabela.to_excel(salvar)                     

#importa todos os arquivos csv.
def importa_ark(raw):
        files.upload()

#Função que dita a seguencia das ações.
def main():
    importa_ark(arknames)
    !mkdir /content/Arquivos_xlsx
    initialize(arknames)
    make_tabel_geral(arknames)
    print('Processo Finalizado!')

main()